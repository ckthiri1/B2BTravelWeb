<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flight Reservation</title>
    <link rel="stylesheet" href="{{ asset('css/reservationpage.css') }}">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .discount-toggle {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        
        .discount-toggle label {
            margin-bottom: 0;
            font-weight: 500;
            cursor: pointer;
        }
        
        .discount-toggle input[type="checkbox"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }
        
        .discount-badge {
            background-color: #28a745;
            color: white;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 12px;
            margin-left: 5px;
        }

        /* Animation for error */
        .shake {
            animation: shake 0.5s;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
    </style>
</head>
<body>

    {{ include('/Sidebar/Navbar.twig') }}
    <div class="container-fluid p-4">
        <h1 class="page-title text-center">FLIGHT RESERVATION</h1>

        <div class="reservation-header">
            <div>Your Selected Flights</div>
            <div class="d-flex align-items-center gap-3">
                <a href="{{ path('flight_history') }}" class="btn btn-history">
                    <i class="bi bi-clock-history me-1"></i> View History
                </a>
            </div>
        </div>

        <div class="scroll-area">
            {% if flights is defined and flights is not empty %}
                <!-- Add discount toggle checkbox -->
                <div class="discount-toggle">
                    <input type="checkbox" id="applyDiscount" checked>
                    <label for="applyDiscount">Apply my {{ user_remise ?? 0 }}% discount</label>
                </div>
                
                {% for flight in flights %}
                    <div class="flight-card" data-price="{{ flight.prixVol }}">
                        <div class="flight-info">
                            <div class="flight-details">
                                <div class="airline-info">
                                    <img src="{{ asset('images/avionicon.jpeg') }}" alt="Airline Logo">
                                    <div>
                                        <div class="fw-bold">{{ flight.airLine }}</div>
                                        <div class="text-muted small">Flight {{ flight.flightNumber }} â€¢ {{ flight.typeVol }}</div>
                                    </div>
                                </div>

                                <div class="flight-route">
                                    <div class="point"></div>
                                    <div class="location">
                                        <div class="city">DEPARTURE</div>
                                        <div class="date">{{ flight.dateDepart|date("M j, Y") }}</div>
                                    </div>

                                    <div class="duration">{{ flight.dureeVol }}</div>

                                    <div class="location">
                                        <div class="city">ARRIVAL</div>
                                        <div class="date">{{ flight.dateArrival|date("M j, Y") }}</div>
                                    </div>
                                    <div class="point"></div>
                                </div>
                            </div>

                            <div class="flight-actions">
                                <div class="seat-selection">
                                    <label class="fw-semibold">Seats:</label>
                                    <input type="number" class="seat-input form-control" min="1" value="1" data-id="{{ flight.volID }}">
                                </div>
                                <div class="price">{{ flight.prixVol }} DT</div>
                                <button class="btn btn-delete" data-id="{{ flight.volID }}">
                                    <i class="bi bi-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <div class="alert alert-info m-3">No flights found for your account.</div>
            {% endif %}
        </div>

        <!-- Pricing Summary Section -->
        <div class="pricing-summary">
            <div class="pricing-row subtotal-row">
                <span class="pricing-label">Subtotal</span>
                <span class="pricing-value" id="subtotal-price">0 DT</span>
            </div>
            
            <div class="pricing-row discount-row">
                <span class="pricing-label">
                    Your Discount
                    <span class="discount-badge" id="discount-percent">0%</span>
                </span>
                <span class="pricing-value discount-value" id="discount-amount">-0 DT</span>
            </div>
            
            <div class="pricing-row total-row">
                <span class="pricing-label total-label">Total Amount</span>
                <span class="pricing-value total-value" id="final-price">0 DT</span>
            </div>
        </div>

        <button type="button" class="btn-reserve" id="proceedToPayment">PROCEED TO PAYMENT</button>

        <!-- Delete Confirmation Modal -->
        <div id="deleteModal" class="modal-overlay">
            <div class="modal-container">
                <div class="modal-header">
                    <h3>Confirm Deletion</h3>
                </div>
                <div class="modal-body">
                    <div class="modal-icon">
                        <i class="bi bi-exclamation-triangle-fill"></i>
                    </div>
                    <p class="modal-message">Are you sure you want to delete this flight? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button class="modal-btn modal-btn-cancel" id="cancelDelete">Cancel</button>
                    <button class="modal-btn modal-btn-confirm" id="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const seatInputs = document.querySelectorAll('.seat-input');
        const subtotalEl = document.getElementById('subtotal-price');
        const discountPercentEl = document.getElementById('discount-percent');
        const discountAmountEl = document.getElementById('discount-amount');
        const finalPriceEl = document.getElementById('final-price');
        const proceedToPaymentBtn = document.getElementById('proceedToPayment');
        const applyDiscountCheckbox = document.getElementById('applyDiscount');
        const userRemise = {{ user_remise ?? 0 }};

        // Delete confirmation modal variables
        let currentFlightId = null;
        let currentFlightCard = null;

        // Price calculation functions
        function calculateDiscount(subtotal) {
            if (applyDiscountCheckbox.checked && userRemise > 0) {
                return { 
                    amount: subtotal * (userRemise / 100), 
                    percent: userRemise + '%' 
                };
            }
            return { amount: 0, percent: '0%' };
        }

        function updatePrice() {
            let subtotal = 0;
            const data = {};
            
            document.querySelectorAll('.flight-card').forEach(card => {
                const input = card.querySelector('.seat-input');
                const price = parseFloat(card.dataset.price);
                const seats = parseInt(input.value || 1);
                const id = input.dataset.id;
                
                subtotal += price * seats;
                data[id] = seats;
            });
            
            const discount = calculateDiscount(subtotal);
            const finalAmount = subtotal - discount.amount;
            
            subtotalEl.textContent = subtotal.toFixed(2) + ' DT';
            discountPercentEl.textContent = discount.percent;
            discountAmountEl.textContent = '-' + discount.amount.toFixed(2) + ' DT';
            finalPriceEl.textContent = finalAmount.toFixed(2) + ' DT';
            
            // Update discount row visibility
            if (discount.amount > 0) {
                document.querySelector('.discount-row').style.display = 'flex';
            } else {
                document.querySelector('.discount-row').style.display = 'none';
            }
        }

        // Event listener for discount checkbox
        applyDiscountCheckbox.addEventListener('change', updatePrice);

        // Seat input event listeners
        seatInputs.forEach(input => {
            input.addEventListener('input', function() {
                // Validate input
                const value = parseInt(this.value);
                if (isNaN(value) || value < 1) {
                    this.value = 1;
                }
                updatePrice();
                
                // Remove error state if corrected
                const card = this.closest('.flight-card');
                card.classList.remove('border-danger', 'shake');
            });
            
            input.addEventListener('change', updatePrice);
        });

        // Proceed to payment button handler
        proceedToPaymentBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            
            // Reset error states
            document.querySelectorAll('.flight-card').forEach(card => {
                card.classList.remove('border-danger', 'shake');
            });
            
            // Collect reservation data
            const reservations = [];
            let isValid = true;
            
            document.querySelectorAll('.flight-card').forEach(card => {
                const input = card.querySelector('.seat-input');
                const seats = parseInt(input.value);
                const id = input.dataset.id;
                
                if (seats > 0) {
                    reservations.push({
                        volId: id,
                        seats: seats,
                        applyDiscount: applyDiscountCheckbox.checked
                    });
                } else {
                    isValid = false;
                    card.classList.add('border-danger', 'shake');
                }
            });
            
            if (!isValid) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Invalid Input',
                    text: 'Please enter valid seat numbers for all flights',
                    confirmButtonColor: '#3085d6',
                });
                return;
            }
            
            if (reservations.length === 0) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'No Flights Selected',
                    text: 'Please select at least one flight',
                    confirmButtonColor: '#3085d6',
                });
                return;
            }
            
            // Store the reservation data temporarily in sessionStorage
            sessionStorage.setItem('pendingReservation', JSON.stringify({
                seatData: reservations,
                applyDiscount: applyDiscountCheckbox.checked,
                subtotal: subtotalEl.textContent,
                discount: discountAmountEl.textContent,
                total: finalPriceEl.textContent
            }));
            
            // Redirect to payment page
            window.location.href = '{{ path("payment_page") }}';
        });

        // Enhanced delete confirmation with SweetAlert2
        document.querySelectorAll('.btn-delete').forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                currentFlightCard = this.closest('.flight-card');
                currentFlightId = this.dataset.id;
                
                Swal.fire({
                    title: 'Remove Flight?',
                    text: "Are you sure you want to remove this flight from your reservation?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'Cancel',
                    customClass: {
                        popup: 'animated bounceIn'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        confirmDelete();
                    }
                });
            });
        });

        async function confirmDelete() {
            if (!currentFlightId) return;
            
            currentFlightCard.style.opacity = '0';
            
            try {
                const response = await fetch(`/Reservation/delete/${currentFlightId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to delete reservation');
                }

                // Show success message and reload the page
                await Swal.fire({
                    icon: 'success',
                    title: 'Flight Removed',
                    text: 'The flight has been successfully removed from your reservation',
                    confirmButtonColor: '#3085d6',
                    timer: 1500,
                    timerProgressBar: true,
                    willClose: () => {
                        window.location.reload();
                    }
                });

            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Deletion Failed',
                    text: error.message || 'Error deleting reservation',
                    confirmButtonColor: '#3085d6',
                });
                currentFlightCard.style.opacity = '1';
            } finally {
                currentFlightId = null;
                currentFlightCard = null;
            }
        }
        
        // Initialize price calculation
        updatePrice();
    });
    </script>
</body>
</html>