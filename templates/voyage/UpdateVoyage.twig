{% extends 'base.html.twig' %}

{% block body %}
<div class="modal-overlay show">
    <div class="modal-content">
        <h2 class="modal-title">Modifier Voyage</h2>
        
        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">
                {{ message }}
            </div>
        {% endfor %}
        
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endfor %}
        
        {{ form_start(form, {'attr': {'class': 'update-voyage-form', 'novalidate': 'novalidate'}}) }}
            <div class="form-group">
                {{ form_label(form.depart, 'Lieu de d√©part', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.depart, {'attr': {'class': 'form-input'}}) }}
                <div class="error-message">
                    {{ form_errors(form.depart) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(form.Destination, 'Destination', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.Destination, {'attr': {'class': 'form-input'}}) }}
                <div class="error-message">
                    {{ form_errors(form.Destination) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(form.Description, 'Description', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.Description, {'attr': {'class': 'form-textarea'}}) }}
                <div class="error-message">
                    {{ form_errors(form.Description) }}
                </div>
            </div>

            <div class="modal-actions">
                <a href="{{ path('app_voyage_index') }}" class="btn btn-cancel">Annuler</a>
                <button type="submit" class="btn btn-update">Modifier</button>
            </div>
        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(8px);
            opacity: 0;
            transform: scale(0.9);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .modal-overlay.show {
            opacity: 1;
            transform: scale(1);
        }

        
        .modal-content {
            background: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            width: 450px;
            animation: fadeInUp 0.3s ease-in-out;
        }

       
        .modal-title {
            font-size: 24px;
            font-weight: bold;
            color: #03045f;
            margin-bottom: 15px;
            text-align: center;
        }

        
        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            font-size: 14px;
            font-weight: bold;
            color: #333;
            display: block;
            margin-bottom: 5px;
        }

        .form-input, .form-textarea {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-input:focus, .form-textarea:focus {
            border-color: #03045f;
            outline: none;
            box-shadow: 0 0 5px rgba(3, 4, 95, 0.3);
        }

        .form-textarea {
            resize: vertical;
            height: 100px;
        }

        
        .modal-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: bold;
            text-align: center;
            cursor: pointer;
            transition: background 0.3s ease, transform 0.2s ease;
        }

        .btn-cancel {
            background: #e74c3c;
            color: white;
            border: none;
            text-decoration: none;
            display: inline-block;
        }

        .btn-update {
            background: #03045f;
            color: white;
            border: none;
        }

        .btn:hover {
            opacity: 0.85;
            transform: scale(1.05);
        }

        /* Error message styling */
        .error-message {
            color: #e74c3c;
            font-size: 12px;
            margin-top: 5px;
            font-weight: 500;
        }

        /* Flash messages styling */
        .alert {
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 8px;
            font-size: 14px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get all input fields
        const inputFields = document.querySelectorAll('.form-input, .form-textarea');
        
        // Add event listener to each input field
        inputFields.forEach(function(input) {
            input.addEventListener('input', function() {
                // Find the closest parent form-group
                const formGroup = this.closest('.form-group');
                if (formGroup) {
                    // Find the error message div inside the form-group
                    const errorDiv = formGroup.querySelector('.error-message');
                    if (errorDiv) {
                        // Clear the error message when user starts typing
                        errorDiv.innerHTML = '';
                    }
                }
            });
        });

        // Add animation for alerts
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(function(alert) {
            // Auto-dismiss alerts after 5 seconds
            setTimeout(function() {
                alert.style.opacity = '0';
                setTimeout(function() {
                    alert.style.display = 'none';
                }, 300);
            }, 5000);
        });
    });
</script>
{% endblock %}